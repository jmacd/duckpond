---
toc: false
title: Water Quality
---

```js
import {timepicker, timerange, legendName, plotName} from "../lib.js";
```

```js
html`<link type="text/css" href="${await FileAttachment('../style.css').url()}" rel="stylesheet" />`
```

<div class="hero">
<h1>Noyo Harbor Blue Economy</h1>
<h2>Quality detail</h2>
</div>

<details>
  <summary>Controls</summary>

```js
const pick = view(await timepicker());
```

```js
const res = timerange(pick);

      // Timestamps are in milliseconds
const now = new Date().getTime();
      
// 24 days, 3600 secs/hour, 1000 ms/sec
const begin = now - pick * 24 * 3600 * 1000;

var datafiles = {
{%- for k2, v2 in export[args[0]] %}
  "{{ k2 }}": [
  {%- for v3 in v2 %}
    {
      "start_time": {{ v3.start_time }},
      "end_time": {{ v3.end_time }},
      "file": FileAttachment("{{ v3.file }}"),
    },
  {%- endfor %}
  ],
{%- endfor %}
};

var duck = await DuckDBClient.of({
})
```

```js
var these = datafiles[`res=${res}`]
    .filter((f) => f.start_time*1000 <= now && f.end_time*1000 >= begin)
    .map((f) => f.file.href);
var all = await duck.query(`select * from read_parquet(${JSON.stringify(these)}) where Timestamp >= epoch_ms(${begin}) ORDER BY Timestamp ASC`);
```
      
</details>

<details>
  <summary>Raw data</summary>

```js
view(Inputs.table(all));
```
</details>
      
<div class="grid grid-cols-1">
{% for key, fields in group(by="name",in=schema.fields) %}
  <div class="card">${
    resize((width) => Plot.plot({
      title: plotName("{{ key }}"),
      width,
      x: {grid: true, type: "time", label: "Date", domain: [begin, now]},
      y: {grid: true, label: "{{ fields[0].unit }}", zero: true},
      color: {legend: true},
      marks: [
      {%- for inst, ifields in group(by="instrument",in=fields) -%}
        {%- set field = ifields[0] -%}
        {% if ifields | length == 1 -%}
          Plot.lineY(all, {x: "Timestamp", y: "{{ field.instrument }}.{{ field.name }}.{{ field.unit }}.{d.agg }}", stroke: (d) => legendName("{{ field.instrument }}", "{{ field.name }}", "{{ field.unit }}")}),
        {% else -%}
          Plot.lineY(all, {x: "Timestamp", y: "{{ field.instrument }}.{{ field.name }}.{{ field.unit }}.avg", stroke: (d) => legendName("{{ field.instrument }}", "{{ field.name }}", "{{ field.unit }}")}),
          Plot.areaY(all, {x: "Timestamp", y1: "{{ field.instrument }}.{{ field.name }}.{{ field.unit }}.min", y2: "{{ field.instrument }}.{{ field.name }}.{{ field.unit }}.max", fillOpacity: 0.3, fill: (d) => legendName("{{ field.instrument }}", "{{ field.name }}", "{{ field.unit }}")}),
        {% endif -%}
      {%- endfor -%}
      ]
    }))
  }</div>
{% endfor %}
</div>
