Add a recursive function to traverse the FS given a path and find
matching file and directory entries. The glob package provides the
basic interface needed.  Focus only on WD support, allowing traversal
to start from any directory. Do not modify glob.rs unless it is
necessary.  The input wildcard-path will contain only normal
components with valid utf-8.

A new WD::visit method takes a wildcard pattern and FnMut(&WD, Handle)
-> Result<T> (the same as WD::in_path); the WD::visit method returns a
collection of matches as type Result<Extend<T> + IntoIterator<Item = T>>.

This will use a recursive method. To keep it as simple as possible,
collect the parse_glob() result into a Vec<WildcardComponent>.  Each
recursive step will accept &[WildcardComponent] for the remaining
pattern and Vec<String> for the captured values so far, which are the
portion of the visited path that matched a wildcard.

The DoubleWildcard special case will advance the input but not the
pattern.  That is, normal matches will consume the leading component
of the pattern (i.e., &pattern[1..]; double-wildcard matches will
recurse with the same pattern.
